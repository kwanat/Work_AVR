// Created by: KAMIL WANAT
// uC: Atmega 8A
// dostêpne porty: PC4-6, PB3-7
// port przycisku: PB0


#include <avr/io.h>
#include<avr/interrupt.h>
# include <util/delay.h>

//makra uzytkownika
#define il_migniec 8
#define czas_migniecia 40
#define czas_calosci 18

//makra sprzetowe
//LED PAS
#define LED1 (1<<PD0)
#define LED2 (1<<PD1)
#define LED3 (1<<PD2)
#define LED4 (1<<PD3)
#define LED5 (1<<PD4)
#define LED6 (1<<PD5)

//LED STATIC
#define STATIC_LED (1<<PD7)
//DISCO LED
#define DISCO_LED1 (1<<PC0)
#define DISCO_LED2 (1<<PC1)
#define DISCO_LED3 (1<<PC2)

//MOTORS
#define MOTOR1 (1<<PC3)

#define music (1<<PD6)
#define KEY (1<<PB0)
#define PORTLED PORTD
#define DDRLED DDRD
#define PORT_DISCO PORTC
#define DDR_DISCO DDRC
#define MOTOR_PORT PORTC
#define MOTOR_DDR DDRC

#define PINKEY PINB
#define PORTKEY PORTB

uint8_t d1;
uint8_t d2;
uint8_t d3;
uint8_t d4;
uint8_t d5;
uint8_t d6;
int t_counter0 = 0;
uint8_t t_counter1 = 0;
uint8_t t_counter2 = 0;
uint8_t p_counter = 0;

//progi PWM
#define prog_0 230
#define prog_1 205
#define prog_2 180
#define prog_3 155
#define prog_4 130
#define prog_5 105
#define prog_6 80
#define prog_7 55
#define prog_8 30
#define prog_9 15

char pwm1 = 255; //zaczynamy od PWM z duty cycle = 0
char pwm2 = 255;
char w_gore = 1; //
uint8_t currentpwm = 1;

void init();
void timer_init();
void start_timer();
void stop_timer();
void PWM_init();
void PWM_start();
void PWM_stop();
void PWM_led();
char LED_przelicz_jasnosc(char wartosc);
void static_LED_ON();
void static_LED_OFF();
void disco_LED_OFF();
void motor_OFF();
void ALL_OFF();
int main(void) {
	uint8_t key_lock;
	init();
	while (1) {

		_delay_ms(20);
		PWM1_led(&OCR1A, 1);
		PWM1_led(&OCR1B, -1);

		if (!key_lock && !(PINKEY & KEY)) {
			PORTLED ^= music;
			_delay_ms(50);
			PORTLED ^= music;
			static_LED_ON();
			PWM_start();
			start_timer();

			key_lock = 1;
			//reakcja na wcisniecie klawisza
		} else if (key_lock && (PINKEY & KEY))
			key_lock++;

	}
	return 0;
}

void init() {
	PWM_init();
	timer_init();
	DDRLED = 0xFF;
	DDR_DISCO |= DISCO_LED1 | DISCO_LED2 | DISCO_LED3;
	MOTOR_DDR |= MOTOR1;
	//	DDRLED1 |= music;
	PORTKEY |= KEY;

	sei();

}

void PWM_init() {
	DDRB = (1 << PB2) | (1 << PB1); //LEDY podpiête pod: PB2-LED lewy, PB1-LED prawy

	//PWM Mode 5 - Fast PWM, 8-bit
	//piny OC1A i OC1B ustawiane na Compare Match, kasowane przy BOTTOM czyli
	//Set OC1A/OC1B on Compare Match, clear OC1A/OC1B at BOTTOM, (inverting mode)
	TCCR1A = (1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (1 << COM1B0)/*| (1<<WGM13)| (1<<WGM12)| (1<<WGM11) */
	| (1 << WGM10);

}

void PWM_start() {
	DDRB = (1 << PB2) | (1 << PB1); //LEDY podpiête pod: PB2-LED lewy, PB1-LED prawy

	OCR1A = 255;
	OCR1B = 255;
	TCCR1B = (1 << CS11); //preskaler = 256

}

void PWM_stop() {
	DDRB = (0 << PB2) | (0 << PB1); //LEDY podpiête pod: PB2-LED lewy, PB1-LED prawy

	OCR1A = 255;
	OCR1B = 255;
	TCCR1B = (0 << CS11); //preskaler = 256
	OCR1A = 255;
	OCR1B = 255;

}
void timer_init() {

//	TCCR0 |=  (1<<CS01); //1024 bit prescaler
	TIMSK |= (1 << TOIE0);

}

void start_timer() {
	TCCR0 |= (1 << CS01);
}

void stop_timer() {
	TCCR0 &= (!(1 << CS00)) & (!(1 << CS02));
}

void PWM1_led(volatile uint8_t *PWMregister, uint8_t pwmnumber) {
	if (currentpwm == pwmnumber) {
		if (w_gore) {

			//rozjaœnianie LED

			if (pwm1 > 5) {
				pwm1 -= 5;
			} else {
				//osi¹gniêto górn¹ granicê
				pwm1 = 0;
				w_gore = 0;  // zmieñ kierunek

			}

		} else {

			//œciemnianie LED

			if (pwm1 < 250) {
				pwm1 += 5;

			} else {
				//osi¹gniêto doln¹ granicê
				pwm1 = 255;
				w_gore = 1;  // zmieñ kierunek
				currentpwm *= -1;
			}
		}

		*PWMregister = pwm1;
		//OCR1A = LED_przelicz_jasnosc(pwm1);
		//OCR1B = LED_przelicz_jasnosc(pwm2);//ustaw PWM LED prawy bez korekcji
	}
}

void static_LED_ON() {
	PORTLED |= STATIC_LED;
}
void static_LED_OFF() {
	PORTLED &= !STATIC_LED;
}
void disco_LED_OFF() {
	PORT_DISCO &= !DISCO_LED1;
	PORT_DISCO &= !DISCO_LED2;
	PORT_DISCO &= !DISCO_LED3;

}
void motor_OFF() {

}
void ALL_OFF() {
	static_LED_OFF();
	disco_LED_OFF();
	motor_OFF();
}

char LED_przelicz_jasnosc(char wartosc) {

	//funkcja koryguj¹ca jasnoœæ œwiecenia, wartoœci dobrane doœwiadczalnie

	if (wartosc > prog_0) {
		return 255;
	} else if (wartosc > prog_1) {
		return 128;
	} else if (wartosc > prog_2) {
		return 80;
	} else if (wartosc > prog_3) {
		return 60;
	} else if (wartosc > prog_4) {
		return 50;
	} else if (wartosc > prog_5) {
		return 35;
	} else if (wartosc > prog_6) {
		return 20;
	} else if (wartosc > prog_7) {
		return 10;
	} else if (wartosc > prog_8) {
		return 6;
	} else if (wartosc > prog_9) {
		return 3;
	} else {
		return 0;
	}
}

ISR (TIMER0_OVF_vect) {
	//PORTLED ^=LED1;

	t_counter0++;
	t_counter1++;
	//t_counter2++;

	if (t_counter0 == 1)
		PORTLED ^= LED1;
	else if (t_counter0 == 20)
		PORTLED ^= LED2;
	else if (t_counter0 == 40)
		PORTLED ^= LED3;
	else if (t_counter0 == 60)
		PORTLED ^= LED4;
	else if (t_counter0 == 80)
		PORTLED ^= LED5;
	else if (t_counter0 == 100)
		PORTLED ^= LED6;
	else if (t_counter0 == 120) {
		t_counter0 = 0;
		p_counter++;
	} else if (p_counter == 60) {
		PWM_stop();
		stop_timer();
		ALL_OFF();
		p_counter = 0;
	}

	if (t_counter1 == 1)
		PORT_DISCO ^= DISCO_LED1;
	else if (t_counter1 == 50) {
		PORT_DISCO ^= DISCO_LED1;
		PORT_DISCO ^= DISCO_LED2;
	} else if (t_counter1 == 100) {
		PORT_DISCO ^= DISCO_LED2;

		PORT_DISCO ^= DISCO_LED3;
	} else if (t_counter1 == 200) {
		PORT_DISCO |= DISCO_LED1;
		PORT_DISCO |= DISCO_LED2;
		PORT_DISCO |= DISCO_LED3;
	} else if (t_counter1 == 205) {
		PORT_DISCO ^= DISCO_LED1;
		PORT_DISCO ^= DISCO_LED2;
		PORT_DISCO ^= DISCO_LED3;
	} else if (t_counter1 == 210) {
		PORT_DISCO ^= DISCO_LED1;
		PORT_DISCO ^= DISCO_LED2;
		PORT_DISCO ^= DISCO_LED3;
	} else if (t_counter1 == 215) {
		PORT_DISCO ^= DISCO_LED1;
		PORT_DISCO ^= DISCO_LED2;
		PORT_DISCO ^= DISCO_LED3;
	} else if (t_counter1 == 220) {
		PORT_DISCO ^= DISCO_LED1;
		PORT_DISCO ^= DISCO_LED2;
		PORT_DISCO ^= DISCO_LED3;
	} else if (t_counter1 == 225) {
		PORT_DISCO ^= DISCO_LED1;
		PORT_DISCO ^= DISCO_LED2;
		PORT_DISCO ^= DISCO_LED3;
	} else if (t_counter1 == 230) {
		PORT_DISCO ^= DISCO_LED1;
		PORT_DISCO ^= DISCO_LED2;
		PORT_DISCO ^= DISCO_LED3;
	} else if (t_counter1 == 235) {
		PORT_DISCO ^= DISCO_LED1;
		PORT_DISCO ^= DISCO_LED2;
		PORT_DISCO ^= DISCO_LED3;
	} else if (t_counter1 == 240) {
		PORT_DISCO ^= DISCO_LED1;
		PORT_DISCO ^= DISCO_LED2;
		PORT_DISCO ^= DISCO_LED3;
	} else if (t_counter1 == 245) {
		t_counter1 = 0;

		PORT_DISCO &= !DISCO_LED1;
		PORT_DISCO &= !DISCO_LED2;
		PORT_DISCO &= !DISCO_LED3;

	}

}


/*
 * functions.c
 *
 *  Created on: 23 paŸ 2017
 *      Author: Kamil
 */


#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "functions.h"



void init() {
	PWM_init();
	timer_init();
	DDRLED = 0xFF;
	DDR_DISCO |= DISCO_LED1 | DISCO_LED2 | DISCO_LED3;
	MOTOR_DDR |= MOTOR1;
	//	DDRLED1 |= music;
	PORTKEY |= KEY;

	sei();

}

void PWM_init() {
	DDRB = (1 << PB2) | (1 << PB1); //LEDY podpiête pod: PB2-LED lewy, PB1-LED prawy

	//PWM Mode 5 - Fast PWM, 8-bit
	//piny OC1A i OC1B ustawiane na Compare Match, kasowane przy BOTTOM czyli
	//Set OC1A/OC1B on Compare Match, clear OC1A/OC1B at BOTTOM, (inverting mode)
	TCCR1A = (1 << COM1A1) | (1 << COM1A0) | (1 << COM1B1) | (1 << COM1B0)/*| (1<<WGM13)| (1<<WGM12)| (1<<WGM11) */
	| (1 << WGM10);

}

void PWM_start() {
	DDRB = (1 << PB2) | (1 << PB1); //LEDY podpiête pod: PB2-LED lewy, PB1-LED prawy

	OCR1A = 255;
	OCR1B = 255;
	TCCR1B = (1 << CS11); //preskaler = 256

}

void PWM_stop() {
	DDRB = (0 << PB2) | (0 << PB1); //LEDY podpiête pod: PB2-LED lewy, PB1-LED prawy

	OCR1A = 255;
	OCR1B = 255;
	TCCR1B = (0 << CS11); //preskaler = 256
	OCR1A = 255;
	OCR1B = 255;

}
void timer_init() {

//	TCCR0 |=  (1<<CS01); //1024 bit prescaler
	TIMSK |= (1 << TOIE0);

}

void start_timer() {
	TCCR0 |= (1 << CS01);
}

void stop_timer() {
	TCCR0 &= (!(1 << CS00)) & (!(1 << CS02));
}

void PWM1_led(volatile uint8_t *PWMregister, uint8_t pwmnumber) {
	if (currentpwm == pwmnumber) {
		if (w_gore) {

			//rozjaœnianie LED

			if (pwm1 > 5) {
				pwm1 -= 5;
			} else {
				//osi¹gniêto górn¹ granicê
				pwm1 = 0;
				w_gore = 0;  // zmieñ kierunek

			}

		} else {

			//œciemnianie LED

			if (pwm1 < 250) {
				pwm1 += 5;

			} else {
				//osi¹gniêto doln¹ granicê
				pwm1 = 255;
				w_gore = 1;  // zmieñ kierunek
				currentpwm *= -1;
			}
		}

		*PWMregister = pwm1;
		//OCR1A = LED_przelicz_jasnosc(pwm1);
		//OCR1B = LED_przelicz_jasnosc(pwm2);//ustaw PWM LED prawy bez korekcji
	}
}

void static_LED_ON() {
	PORTLED |= STATIC_LED;
}
void static_LED_OFF() {
	PORTLED &= !STATIC_LED;
}
void disco_LED_OFF() {
	PORT_DISCO &= !DISCO_LED1;
	PORT_DISCO &= !DISCO_LED2;
	PORT_DISCO &= !DISCO_LED3;

}
void motor_ON()
{
	MOTOR_PORT|=MOTOR1;
}
void motor_OFF() {
	MOTOR_PORT&=!MOTOR1;
}
void ALL_OFF() {
	static_LED_OFF();
	disco_LED_OFF();
	motor_OFF();
}

char LED_przelicz_jasnosc(char wartosc) {

	//funkcja koryguj¹ca jasnoœæ œwiecenia, wartoœci dobrane doœwiadczalnie

	if (wartosc > prog_0) {
		return 255;
	} else if (wartosc > prog_1) {
		return 128;
	} else if (wartosc > prog_2) {
		return 80;
	} else if (wartosc > prog_3) {
		return 60;
	} else if (wartosc > prog_4) {
		return 50;
	} else if (wartosc > prog_5) {
		return 35;
	} else if (wartosc > prog_6) {
		return 20;
	} else if (wartosc > prog_7) {
		return 10;
	} else if (wartosc > prog_8) {
		return 6;
	} else if (wartosc > prog_9) {
		return 3;
	} else {
		return 0;
	}
}
